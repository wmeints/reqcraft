@page "/"
@using System.Text.RegularExpressions
@using Markdig
@using Microsoft.JSInterop
@using Reqcraft.Assistant.Domain.ConversationAggregate
@using Reqcraft.Assistant.Domain.ConversationAggregate.Commands
@using Reqcraft.Assistant.Domain.ConversationHistory
@using Reqcraft.Assistant.Domain.Shared
@inject ILanguageService LanguageService
@inject IConversationHistoryService HistoryService
@inject IJSRuntime JavaScript
@inject AggregateRepository Repository
<HeadContent>
    <title>Home - Reqcraft</title>
</HeadContent>

<div class="container-fluid vh-100">
    <div class="row vh-100">
        <div class="col-md-2 bg-light p-4">
            <h1 class="h3">Reqcraft</h1>
            <hr>
            <button class="btn btn-outline-primary w-100" @onclick="StartNewConversation">Start new conversation</button>
            <hr>
            <ul class="list-unstyled">
                @foreach (var record in _history)
                {
                    <li><a href="#" @onclick:preventDefault="true" @onclick="() => LoadConversation(record.ConversationId)">@record.Date.ToLocalTime()</a></li>
                }
            </ul>
        </div>
        <div class="col position-relative d-flex overflow-hidden flex-column vh-100 w-100">
            <div class="d-flex flex-grow-1 flex-column position-relative overflow-y-auto" @ref="_messagesContainer">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            @if(_conversation != null)
                            {
                                @foreach (var message in _conversation.Messages)
                                {
                                    <div class="mb-2">
                                        @if (message.Role == ChatRole.Assistant)
                                        {
                                            <div class="d-flex flex-row me-5">
                                                <div class="flex-grow-1 text-body-tertiary mb-0 pt-2">Response received @message.Timestamp.ToLocalTime()</div>
                                                <button class="btn btn-link" @onclick="() => CopyMessageContent(message)">
                                                    <i class="bi bi-clipboard"></i>
                                                </button>
                                            </div>
                                            <div class="card me-5">
                                                <div class="card-body">
                                                    @(new MarkupString(Markdown.ToHtml(message.Content)))
                                                </div>
                                            </div>
                                        }
                                        @if (message.Role == ChatRole.User)
                                        {
                                            <div class="d-flex flex-row justify-content-end ms-5">
                                                <div class="text-body-tertiary mb-0 text-end me-2 pt-2">You wrote at @message.Timestamp.ToLocalTime()</div>
                                                <button class="btn btn-link" @onclick="() => CopyMessageContent(message)">
                                                    <i class="bi bi-clipboard"></i>
                                                </button>
                                            </div>
                                            <div class="card ms-5">
                                                <div class="card-body">
                                                    @(new MarkupString(Markdown.ToHtml(message.Content)))
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            @if (_generatingResponse)
                            {
                                <div class="mb-2">
                                    <p class="text-body-tertiary mb-0">Generating response...</p>
                                    <div class="card">
                                        <div class="card-body">
                                            @(new MarkupString(Markdown.ToHtml(_generatedResponse)))
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="justify-content-center flex-shrink-0">
                <div class="container">
                    <div class="row mb-2">
                        <div class="col">
                            <textarea class="form-control" rows="4" @bind-value="_userPrompt" @bind-value:event="oninput" @onkeyup="OnUserPromptKeyUp"></textarea>
                        </div>
                    </div>
                    <div class="row justify-content-end mb-4">
                        <div class="col-auto">
                            <button class="btn btn-primary" @onclick="OnSubmitUserPromptClick">
                                <i class="bi bi-send"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly Regex _markdownPattern = new("```markdown\n(.*)\n```", RegexOptions.Multiline);

    private Conversation? _conversation;
    private List<HistoryRecord> _history = new();
    private string _userPrompt = "";
    private bool _generatingResponse = false;
    private string _generatedResponse = "";
    private ElementReference _messagesContainer;

    protected override async Task OnInitializedAsync()
    {
        var historyRecords = await HistoryService.GetConversationHistoryAsync();
        _history = new List<HistoryRecord>(historyRecords);
    }

    private async Task OnUserPromptKeyUp(KeyboardEventArgs e)
    {
        if ((e.CtrlKey || e.MetaKey) && e.Code == "Enter")
        {
            await SubmitUserPrompt();
        }
    }

    private async Task OnSubmitUserPromptClick()
    {
        await SubmitUserPrompt();
    }

    private async Task SubmitUserPrompt()
    {
        _generatingResponse = true;

        if (_conversation == null)
        {
            _conversation = Conversation.Start(new StartConversation(Guid.NewGuid()));
        }
        
        var promptValue = _userPrompt;
        _userPrompt = "";
        
        var result = _conversation.SendMessage(new SendMessage(_conversation.Id, promptValue), LanguageService);

        StateHasChanged();

        await foreach (var chunk in result.ResponseStream)
        {
            _generatedResponse += chunk;
            
            StateHasChanged();
            
            await ScrollMessagesToBottom();
        }

        _generatedResponse = "";
        _generatingResponse = false;

        StateHasChanged();
        
        await ScrollMessagesToBottom();

        await Repository.SaveAsync(_conversation);

        _history = new List<HistoryRecord>(await HistoryService.GetConversationHistoryAsync());
    }

    private async Task ScrollMessagesToBottom()
    {
        await JavaScript.InvokeVoidAsync("window.reqcraft.scrollContainer", _messagesContainer);
    }

    private async Task CopyMessageContent(ChatMessage message)
    {
        var match = _markdownPattern.Match(message.Content);

        if (match.Success)
        {
            await JavaScript.InvokeVoidAsync("window.reqcraft.copyContent", match.Groups[1].Value);
        }
        else
        {
            await JavaScript.InvokeVoidAsync("window.reqcraft.copyContent", message.Content);    
        }
    }

    private async Task LoadConversation(Guid conversationId)
    {
        _conversation = await Repository.LoadAsync<Conversation>(conversationId);
        StateHasChanged();
    }

    private void StartNewConversation()
    {
        _conversation = null;
    }
}